///////////////////////////////////////////////////////////Список:
///////////////////////////////////C++:
 struct dyn_list {
		comp* head; // Первый элемент (голова) списка
		comp* tail; // Последний элемент (хвост) списка
	}; 
   // Создание пустого списка
void constr_list(dyn_list &l)
{
	l.head = NULL;
}
// Проверка списка на пустоту
bool chk_empty(dyn_list l)
{
	return (l.head==NULL);
}
// Включение в список нового компонента
void comp_in(dyn_list &l, char* n, char* v)
{
	comp* c = new comp();
	strcpy_s(c->name, 20, n);
	strcpy_s(c->value, 10, v);
	c->next = NULL;
	if (chk_empty(l))
		l.head = c;
	else
		l.tail->next = c;
	l.tail = c;
} 
 // Поиск компонента в списке по имени
comp* search(dyn_list l, char *n)
{
	while (l.head != NULL)
	{
		if (!strcmp(l.head->name,n))
			return l.head;
		l.head = l.head->next;
	}
	return l.head;
} 
// Удаление компонента из списка
void comp_del(dyn_list &l, comp* c)
{
	if (c == l.head)
	{
		l.head = c->next;
		return;
	}
	comp* r = new comp();
	r = l.head;
	while (r->next != c)
		r = r->next;
	r->next = c->next;
	delete c;
} 
 // Изменение значения компонента
void comp_edit(comp &c, char* v)
{
	strcpy_s(c.value, 10, v);
} 
///////////////////////////////////Python:
//Объявление элемента списка в Python
	class Node:
    def __init__(self, value = None, next = None):
        self.value = value
        self.next = next
        
//Исходный код класса Linked List
import copy
import random 
 
class LinkedList:
    def __init__(self):
        self.first = None
        self.last = None
        self.length = 0
 
    def __str__(self):
        if self.first != None:
            current = self.first
            out = 'LinkedList [\n' +str(current.value) +'\n'
            while current.next != None:
                current = current.next
                out += str(current.value) + '\n'
            return out + ']'
        return 'LinkedList []'
 
    def clear(self):
        self.__init__()
 
//создание связного списка из 3-х элементов
L = LinkedList()
L.add(1)
L.add(2)
L.add(3)

//Функция на языке Python для определения длины списка
def Len(self):
    self.length =0
    if self.first != None:
        self.length +=1
        current = self.first
        while current.next != None:
            current = current.next
            self.length +=1
    return self.length
    
//Push на языке Python
def Push(self, x):
    if self.first == None:
        self.first = Node(x,None)
        self.last = self.first
    else:
        self.first = Node(x,self.first)
        
//добавление элемента в конец списка
def add(self, x):
    if self.first == None:
        self.first = Node(x, None)
        self.last = self.first
    elif self.last == self.first:
        self.last = Node(x, None)
        self.first.next = self.last
    else:
        current = Node(x, None)
        self.last.next = current
        self.last = current
        
//вставка элемента в список
def InsertNth(self,i,x):
    if (self.first == None):
        self.first = Node(x,self.first)
        self.last = self.first.next
        return
    if i == 0:
      self.first = Node(x,self.first)
      return
    curr=self.first
    count = 0
    while curr != None:
        if count == i-1:
          curr.next = Node(x,curr.next)
          if curr.next.next == None:
            self.last = curr.next
          break
        curr = curr.next
        
//Функция Pop – реализация на Python
def Pop(self):
    oldhead=self.first
    if oldhead==None:
        return None
    self.first=oldhead.next
    if self.first==None:
        self.last=None
    return oldhead.value
    
//удаление элемента из списка
def Del(self,i):
    if (self.first == None):
      return
    old = curr = self.first
    count = 0
    if i == 0:
      self.first = self.first.next
      return
    while curr != None:
        if count == i:
          if curr.next == self.last:
            self.last = curr
            break
          else:
            old.next = curr.next 
          break
        old = curr  
        curr = curr.next
        count += 1
        
//вставка элемента в отсортированный список
def SortedInsert(self,x):
    if (self.first == None):
      self.first = Node(x,self.last)
      return
    if self.first.value > x:
      self.first = Node(x,self.first)
      return
    old = curr = self.first
    while curr != None:
        if curr.value > x:
          curr = Node(x,curr)
          old.next = curr
          return
        old = curr
        curr = curr.next
    curr = Node(x,None)        
    old.next = curr
    
//удаление повторяющихся значений
def RemoveDuplicates(self):
    if (self.first == None):
        return
    old = curr = self.first
    while curr != None:
        _del = 0 
        if curr.next != None:
            if curr.value == curr.next.value:
              curr.next = curr.next.next
              _del = 1
        if _del == 0:
          curr = curr.next
          
//Копирование
          import copy
L2 = copy.deepcopy(L) // создание копии списка L

///////////////////////////////////Java:
public class Node {
  //содержимое текущего элемента списка
  private int element;
  //указатель на следующий элемент списка
  private Node next;
  //вывод содержимого текущего элемента
  public int getElement(){
    return element;
  }
  //установка содержимого для текущего элемента списка
  public void setElement(int e){
    element = e;
  }
  //получение указателя на следующий элемент списка
  public Node getNext() {
    return next;
  }
  //установка следующего элемента списка
  public void setNext(Node n) {
    next = n;
  }
}
