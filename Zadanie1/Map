///////////////////////////////////////////////////////////Отображение:
///////////////////////////////////Python:
from collections import ItemsView, KeysView, ValuesView, Sequence

from .sortedlist import SortedList, recursive_repr

class SortedDict(dict):
  
    def __init__(self, *args, **kwargs):
        if args and (args[0] is None or callable(args[0])):
            _key = self._key = args[0]
            args = args[1:]
        else:
            _key = self._key = None

        self._list = SortedList(key=_key)

        # Calls to super() are expensive so cache references to dict methods on
        # sorted dict instances.

        _dict = super(SortedDict, self)
        self._dict_clear = _dict.clear
        self._dict_delitem = _dict.__delitem__
        self._dict_iter = _dict.__iter__
        self._dict_pop = _dict.pop
        self._dict_setitem = _dict.__setitem__
        self._dict_update = _dict.update

        # Reaching through ``self._list`` repeatedly adds unnecessary overhead
        # so cache references to sorted list methods.

        _list = self._list
        self._list_add = _list.add
        self._list_clear = _list.clear
        self._list_iter = _list.__iter__
        self._list_reversed = _list.__reversed__
        self._list_pop = _list.pop
        self._list_remove = _list.remove
        self._list_update = _list.update

        # Expose some sorted list methods publicly.

        self.bisect_left = _list.bisect_left
        self.bisect = _list.bisect_right
        self.bisect_right = _list.bisect_right
        self.index = _list.index
        self.irange = _list.irange
        self.islice = _list.islice
        self._reset = _list._reset

        if _key is not None:
            self.bisect_key_left = _list.bisect_key_left
            self.bisect_key_right = _list.bisect_key_right
            self.bisect_key = _list.bisect_key
            self.irange_key = _list.irange_key

        # GrantJ 2018-05-21 Temporary fix for improved backwards compatibility
        # with V1.

        self.iloc = SortedKeysView(self)

        self._update(*args, **kwargs)


    @property
    def key(self):
        return self._key


    def clear(self):
        self._dict_clear()
        self._list_clear()


    def __delitem__(self, key):
        self._dict_delitem(key)
        self._list_remove(key)


    def __iter__(self):
        return self._list_iter()


    def __reversed__(self):
        return self._list_reversed()


    def __setitem__(self, key, value):
        if key not in self:
            self._list_add(key)
        self._dict_setitem(key, value)

    _setitem = __setitem__


    def copy(self):
        return self.__class__(self._key, self.items())

    __copy__ = copy


    @classmethod
    def fromkeys(cls, iterable, value=None):
        return cls((key, value) for key in iterable)


    def keys(self):
        return SortedKeysView(self)


    def items(self):
        return SortedItemsView(self)


    def values(self):
        return SortedValuesView(self)


    class _NotGiven(object):
        # pylint: disable=too-few-public-methods
        def __repr__(self):
            return '<not-given>'

    __not_given = _NotGiven()

    def pop(self, key, default=__not_given):
        if key in self:
            self._list_remove(key)
            return self._dict_pop(key)
        else:
            if default is self.__not_given:
                raise KeyError(key)
            else:
                return default


    def popitem(self, index=-1):
        if not self:
            raise KeyError('popitem(): dictionary is empty')

        key = self._list_pop(index)
        value = self._dict_pop(key)
        return (key, value)


    def peekitem(self, index=-1):
        key = self._list[index]
        return key, self[key]


    def setdefault(self, key, default=None):
        
        if key in self:
            return self[key]
        self._dict_setitem(key, default)
        self._list_add(key)
        return default


    def update(self, *args, **kwargs):
        if not self:
            self._dict_update(*args, **kwargs)
            self._list_update(self._dict_iter())
            return

        if not kwargs and len(args) == 1 and isinstance(args[0], dict):
            pairs = args[0]
        else:
            pairs = dict(*args, **kwargs)

        if (10 * len(pairs)) > len(self):
            self._dict_update(pairs)
            self._list_clear()
            self._list_update(self._dict_iter())
        else:
            for key in pairs:
                self._setitem(key, pairs[key])

    _update = update


    def __reduce__(self):
        return (self.__class__, (self._key, list(self.items())))


    @recursive_repr()
    def __repr__(self):
        _key = self._key
        type_name = type(self).__name__
        key_arg = '' if _key is None else '{0!r}, '.format(_key)
        item_format = '{0!r}: {1!r}'.format
        items = ', '.join(item_format(key, self[key]) for key in self._list)
        return '{0}({1}{{{2}}})'.format(type_name, key_arg, items)


    def _check(self):
        _list = self._list
        _list._check()
        assert len(self) == len(_list)
        assert all(key in self for key in _list)


def _view_delitem(self, index):
    _mapping = self._mapping
    _list = _mapping._list
    _dict_delitem = _mapping._dict_delitem
    if isinstance(index, slice):
        keys = _list[index]
        del _list[index]
        for key in keys:
            _dict_delitem(key)
    else:
        key = _list.pop(index)
        _dict_delitem(key)


class SortedKeysView(KeysView, Sequence):
    __slots__ = ()


    def __getitem__(self, index):
        
        return self._mapping._list[index]


    __delitem__ = _view_delitem


class SortedItemsView(ItemsView, Sequence):
    __slots__ = ()


    def __getitem__(self, index):
        _mapping = self._mapping
        _mapping_list = _mapping._list

        if isinstance(index, slice):
            keys = _mapping_list[index]
            return [(key, _mapping[key]) for key in keys]

        key = _mapping_list[index]
        return key, _mapping[key]


    __delitem__ = _view_delitem


class SortedValuesView(ValuesView, Sequence):
    __slots__ = ()


    def __getitem__(self, index):
        _mapping = self._mapping
        _mapping_list = _mapping._list

        if isinstance(index, slice):
            keys = _mapping_list[index]
            return [_mapping[key] for key in keys]

        key = _mapping_list[index]
        return _mapping[key]


    __delitem__ = _view_delitem
///////////////////////////////////Java:
package hashmap;

import java.util.LinkedList;

/**
 * @author capezzbr
 * @param <K> is the key type
 * @param <V> is the value type
 */
public class HashMap<K, V> {
   
   class Item<K, V> {
      private final K key;
      private V value;
      
      public Item(K key, V value) {
         this.key = key; this.value = value;
      }
      
      public K getKey() {
         return this.key;
      }
      
      public V getValue() {
         return this.value;
      }
      
      public void setValue(V value) {
         this.value = value;
      }
      
      public boolean hasSameKey(K key) {
         return this.key == null ? this.key == key : this.key.equals(key);
      }
   }
   
   private final static int DEFAULT_SIZE = 32;
   private final int size;
   private final LinkedList<Item<K, V>>[] elements;
   
   public HashMap() {
      this(DEFAULT_SIZE);
   }
   
   public HashMap(int size) {
      this.size = size;
      this.elements = (LinkedList<Item<K, V>>[])new LinkedList[size];
   }
   
   private int simpleHash(K key) {
      if ( key == null ) return 0;
      else {
         int hash = 7;
         String strKey = key.toString();
         for (int i=0; i < strKey.length(); i++) {
            hash = hash * 31 + strKey.charAt(i);
         }
         return hash;
      }
   }
   
   public boolean hasElement(K key) {
      int index = simpleHash(key) % size;
      if ( elements[index] == null ) {
         return false;
      }
      
      for ( Item<K, V> i : elements[index] ) {
         if ( i.hasSameKey(key) ) {
            return true;
         }
      }
      return false;
   }
   
   public V get(K key) {
      int index = simpleHash(key) % size;
      if ( elements[index] == null ) {
         return null;
      }
      
      for ( Item<K, V> i : elements[index] ) {
         if ( i.hasSameKey(key) ) {
            return i.getValue();
         }
      }
      return null;
   }
   
   public void put(K key, V value) {
      int index = simpleHash(key) % size;
      if ( elements[index] == null ) {
         elements[index] = new LinkedList<>();
      }
      
      for ( Item<K, V> i : elements[index] ) {
         if ( i.hasSameKey(key) ) {
            elements[index].remove(i);
            break;
         }
      }
      
      elements[index].add( new Item<>(key, value) );
   }
   
   @Override
   public String toString() {
      StringBuilder sb = new StringBuilder();
      int elementIndex;
      for ( int k = 0; k < size; k++ ) {
         if ( elements[k] != null ) {
            elementIndex = 0;
            sb.append("[").append(k).append("] -> {");
            for ( Item<K, V> i : elements[k] ) {
               sb.append(i.getKey()).append(" = ").append(i.getValue());
               if ( elementIndex < elements[k].size() -1 ) {
                  sb.append(", ");
               }
               elementIndex++;
            }
            sb.append("}\n");
         }
      }
      return sb.toString();
   }
}

///////////////////////////////////C++:
#include <iostream>
#include <stdexcept>

template <class Key>
struct Less
{
    bool operator()(Key a, Key b) const
    {
        return a < b;
    }
};

template <class Key, class T, class Compare=Less<Key>>
class map
{
private:

    struct Node
    {
        Node* Parent;
        Node* Left;
        Node* Right;
        std::pair<Key, T> Value;
    };

    Node * Root;

    void Delete(Node* rhs)
    {
        if (rhs != nullptr) {
            if (rhs->Left != nullptr) {
                Delete(rhs->Left);
            }
            if (rhs->Right != nullptr) {
                Delete(rhs->Right);
            }
            delete rhs;
        }
        return;
    }

    Node* Copy(Node* rhs)
    {
        Node* tmp = new Node;
        if (rhs != nullptr) {
            tmp->Parent = rhs->Parent;
            tmp->Value.first = rhs->Value.first;
            tmp->Value.second = rhs->Value.second;
            if (rhs->Left != nullptr)
                tmp->Left = Copy(rhs->Left);
            if (rhs->Right != nullptr)
                tmp->Right = Copy(rhs->Right);
        }
        return tmp;
    }

public:

    struct Iterator
            : public std::iterator<std::random_access_iterator_tag, std::pair<Key, T>>
    {

        Node * ptr;

        explicit Iterator(Node* p)
                : ptr(p)
        { }

        std::pair<Key, T>& operator*()
        {
            return ptr->Value;
        }

        std::pair<Key, T>* operator->()
        {
            std::pair<Key, T>* tmp = &(ptr->Value);
            return tmp;
        }

        Iterator& operator++()
        {
            if (ptr->Right != nullptr) {
                ptr = ptr->Right;
                while (ptr->Left != nullptr) {
                    ptr = ptr->Left;
                }
                return *this;
            } else {
                while(ptr->Parent != nullptr) {
                    if (ptr->Parent->Value.first > ptr->Value.first) {
                        ptr = ptr->Parent;
                        return *this;
                    } else {
                        if(ptr->Value.first == Key()){
                            return *this;
                        }
                        ptr = ptr->Parent;
                    }
                }
            }
        }

        Iterator operator++(int /*unused*/)
        {
            Iterator it(ptr);
            ++*this;
            return it;
        }

        Iterator& operator+=(size_t n)
        {
            for (size_t i = 0; i < n; ++i) {
                ++ptr;
            }
            return *this;
        }

        Iterator& operator-=(size_t n)
        {
            for (size_t i = 0; i < n; ++i) {
                --ptr;
            }
            return *this;
        }

        Iterator& operator--()
        {
            if (*this == end()) {
                while(ptr->Right != nullptr)
                    ptr =  ptr->Right;
            }
            if (ptr->Left != nullptr) {
                ptr = ptr->Left;
                while (ptr->Right != nullptr) {
                    ptr = ptr->Right;
                }
                return *this;
            } else {
                while(ptr->Parent != nullptr) {
                    if (ptr->Parent->Value.first > ptr->Value.first) {
                        ptr = ptr->Parent;
                    } else {
                        ptr = ptr->Parent;
                        return *this;
                    }
                }
            }
        }

        Iterator operator--(int /*unused*/)
        {
            Iterator it(ptr);
            --ptr;
            return it;
        }

        bool operator==(Iterator it)
        {
            return (ptr->Value.first == it.ptr->Value.first)
                   && (ptr->Value.second == it.ptr->Value.second);
        }

        bool operator<(Iterator it)
        {
            return ptr->Value.first < it.ptr->Value.first;
        }

        bool operator<=(Iterator it)
        {
            return this->operator==(it) || this->operator<(it);
        }

        bool operator>(Iterator it)
        {
            return !(this->operator==(it) || this->operator<(it));
        }

        bool operator>=(Iterator it)
        {
            return !this->operator<(it);
        }

        bool operator!=(Iterator it)
        {
            return !(this->operator==(it));
        }
    };

    using value_type = T;
    using size_type = size_t;
    using difference_type = std::ptrdiff_t;
    using reference = value_type&;
    using const_reference = const value_type&;
    using pointer = T*;
    using const_pointer = const T*;
    using iterator = Iterator;
    using const_iterator = const Iterator;

    map()
    {
        Root = new Node;
        Root->Parent = new Node;
        Root->Parent->Right = Root;
        Root->Parent->Parent = nullptr;
        Root->Parent->Left = nullptr;
        Root->Parent->Value.first = Key();
        Root->Parent->Value.second = T();
        Root->Right = nullptr;
        Root->Left = nullptr;
        Root->Value.first = Key();
        Root->Value.second = T();
    }

    ~map()
    {
        Delete(Root);
    }

    map(const map& rhs)
    {
        Root = Copy(rhs.Root);
    }

    map& operator=(const map& rhs)
    {
        if (this != &rhs) {
            Delete(Root);
            Root = Copy(rhs.Root);
        }
        return *this;
    }

    iterator begin()
    {
        Node* tmp = Root;
        while (tmp->Left != nullptr) {
            tmp = tmp->Left;
        }
        return Iterator(tmp);
    }

    const_iterator begin() const
    {
        Node* tmp = Root;
        while (tmp->Left != nullptr) {
            tmp = tmp->Left;
        }
        return const_iterator(tmp);
    }

    iterator end()
    {
        iterator it(Root->Parent);
        return it;
    }

    const_iterator end() const
    {
        iterator it(Root->Parent);
        return it;
    }

    size_type size() const
    {
        if ((Root->Left == nullptr) && (Root->Right == nullptr)
                && (Root->Value.first == Key()) && (Root->Value.second == T())) {
            return 0;
        } else {
            size_t length = 0;
            for (iterator it = begin(); it != end(); ++it) {
                ++length;
            }
            return length;
        }
    }

    bool empty() const
    {
        return size() == 0;
    }

    T& operator[](const Key& key)
    {
        Iterator result = find(key);
        if (result == end()) {
            insert(key, T());
            return find(key).ptr->Value.second;
        }
        return result.ptr->Value.second;
    }

    T& operator[](Key&& key)
    {
        Iterator result = find(key);
        if (result == end()) {
            insert(key, T());
            return find(key).ptr->Value.second;
        }
        return result.ptr->Value.second;
    }

    T& at(const Key& key)
    {
        Iterator result = find(key);
        if (result.ptr == nullptr) {
            throw std::out_of_range("Error");
        } else {
            return result.ptr->Value.second;
        }
    }

    const T & at(const Key& key) const
    {
        Iterator result = find(key);
        if (result.ptr == nullptr) {
            throw std::out_of_range("Error");
        } else {
            return result.ptr->Value.second;
        }
    }

    void insert(const Key& key, const T& value)
    {
        if (find(key) != end()) {
            return;
        }
        if ((Root->Value.first == Key()) && (Root->Value.second == T())) {
            Root->Value.first = key;
            Root->Value.second = value;
            return;
        }
        Node * newBranch = new Node;
        Node * newNode = nullptr;
        Node * tmp = Root;
        newBranch->Value.first = key;
        newBranch->Value.second = value;
        newBranch->Left = nullptr;
        newBranch->Right = nullptr;
        while (tmp != nullptr) {
            newNode = tmp;
            if ((newBranch->Value.first) < (tmp->Value.first)) {
                tmp = tmp->Left;
            } else {
                tmp = tmp->Right;
            }
        }
        newBranch->Parent = newNode;
        if (newNode == nullptr) {
            Root = newBranch;
        } else {
            if ((newBranch->Value.first) < (newNode->Value.first)) {
                newNode->Left = newBranch;
            } else {
                newNode->Right = newBranch;
            }
        }
    }

    void insert(std::pair<Key, T> rhs)
    {
        Key key = rhs.first;
        T value = rhs.second;
        if (find(key) != end()) {
            return;
        }
        if ((Root->Value.first == Key()) && (Root->Value.second == T())) {
            Root->Value.first = key;
            Root->Value.second = value;
            return;
        }
        Node * newBranch = new Node;
        Node * newNode = nullptr;
        Node * tmp = Root;
        newBranch->Value.first = key;
        newBranch->Value.second = value;
        newBranch->Left = nullptr;
        newBranch->Right = nullptr;
        while (tmp != nullptr) {
            newNode = tmp;
            if ((newBranch->Value.first) < (tmp->Value.first)) {
                tmp = tmp->Left;
            } else {
                tmp = tmp->Right;
            }
        }
        newBranch->Parent = newNode;
        if (newNode == nullptr) {
            Root = newBranch;
        } else {
            if ((newBranch->Value.first) < (newNode->Value.first)) {
                newNode->Left = newBranch;
            } else {
                newNode->Right = newBranch;
            }
        }
    }

    void erase(Iterator it)
    {
        Iterator tmp = find(it->first);
        if (tmp == end()) {
            return;
        }
        if (tmp.ptr->Right == nullptr) {
            if (tmp.ptr->Parent->Left == tmp.ptr) {
                tmp.ptr->Parent->Left = tmp.ptr->Left;
            } else {
                tmp.ptr->Parent->Right = tmp.ptr->Left;
            }
            tmp.ptr->Left->Parent = tmp.ptr->Parent;
            return;
        } else if (tmp.ptr->Left == nullptr) {
            if (tmp.ptr->Parent->Left == tmp.ptr) {
                tmp.ptr->Parent->Left = tmp.ptr->Right;
            } else {
                tmp.ptr->Parent->Right = tmp.ptr->Right;
            }
            tmp.ptr->Right->Parent = tmp.ptr->Parent;
            return;
        } else {
            if (tmp.ptr == Root) {
                std::swap(tmp.ptr->Right->Value, Root->Value);
                tmp.ptr = tmp.ptr->Right;
            }
            Node* rhs = tmp.ptr->Right;
            while (rhs->Left != nullptr) {
                rhs = rhs->Left;
            }
            tmp.ptr->Value.first = rhs->Value.first;
            tmp.ptr->Value.second = rhs->Value.second;
            Node* tmp1 = rhs->Parent->Left;
            rhs->Parent->Left = nullptr;
            delete tmp1;
        }
    }

    void swap(map& other)
    {
        std::swap(Root, other.Root);
    }

    void clear()
    {
        delete Root->Parent;
        Delete(Root);
        Root = new Node;
        Root->Parent = new Node;
        Root->Parent->Right = Root;
        Root->Right = nullptr;
        Root->Left = nullptr;
        Root->Value.first = Key();
        Root->Value.second = T();
    }

    Iterator find(const Key& key) const
    {
        Node* tmp = Root;
        while (tmp->Value.first != key) {
            if (key < tmp->Value.first) {
                tmp = tmp->Left;
            } else {
                tmp = tmp->Right;
            }
            if (tmp == nullptr)
            {
                return end();
            }
        }
        iterator it(tmp);
        return it;
    }
};
